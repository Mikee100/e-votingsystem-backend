DB_HOST= localhost
DB_USER=root
DB_PASSWORD=10028mike.
DB_NAME=evoting_system
PORT=3000
3MnE86sudBOMtBSciPeINg


 const handleSubmit = async (e) => {
    e.preventDefault();
    setErrorMessage('');
    setIsLoading(true);

    try {
      // Send login request
      const response = await axios.post('http://localhost:3000/login', { email, password });

      // Extract token, role, and user name from response
      const { token, role, name,email: existingEmail } = response.data; // Assuming the response contains the user's name

      console.log('Login successful:', response.data);
      console.log("Extracted Email:", existingEmail);

     // Store user data in sessionStorage
sessionStorage.setItem('userEmail', existingEmail); // Use existingEmail here, not email
console.log(sessionStorage.getItem('userEmail')); // Check if it's stored correctly

      sessionStorage.setItem('token', token);
      sessionStorage.setItem('userRole', role);

      // Call the login function from Auth context to update the state
      login({ name, token, role,existingEmail }); // Pass the necessary user data to the login function

      // Redirect based on role
      const roleRedirects = {
        admin: '/admin/dashboard',
        president: '/partypage',
      };

      navigate(roleRedirects[role] || '/'); // Default redirect if role isn't specified
    } catch (error) {
      console.error('Login error:', error);

      const status = error.response?.status;
      const errorMessage = error.response?.data?.message;

      if (status === 429) {
        setErrorMessage('Too many login attempts. Please try again later.');
      } else if (status === 401) {
        setErrorMessage('Invalid email or password.');
      } else if (status === 403 && errorMessage === 'Your account has been disabled. Please contact support.') {
        setErrorMessage(errorMessage);
      } else if (error.request) {
        setErrorMessage('Network error. Please check your internet connection.');
      } else {
        setErrorMessage('An unexpected error occurred. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };


  app.post('/api/vote', async (req, res) => {
  const { email, candidateId, candidateType, token } = req.body;

  if (!email || !candidateId || !candidateType || !token) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  try {
    // Step 1: Verify the token
    const result = await db.execute(
      `SELECT * FROM voting_tokens WHERE token = ? AND candidate_type = ?`,
      [token, candidateType]
    );

    if (result.length === 0) {
      return res.status(400).json({ error: 'Invalid or expired token' });
    }

    // Step 2: Record the vote in the database
    const hashedVoterId = crypto.createHash('sha256').update(email).digest('hex');
    
    const voteResult = await db.execute(
      `INSERT INTO votes (voter_id, candidate_id, candidate_type) VALUES (?, ?, ?)`,
      [hashedVoterId, candidateId, candidateType]
    );

    if (voteResult.affectedRows > 0) {
      // Step 3: Mark the token as used
      await db.execute(`DELETE FROM voting_tokens WHERE token = ?`, [token]);

      res.status(200).json({ message: 'Vote successfully cast' });
    } else {
      throw new Error('Failed to record the vote');
    }
  } catch (error) {
    console.error('Error recording vote:', error);
    res.status(500).json({ error: 'Failed to cast vote. Please try again later.' });
  }
});
